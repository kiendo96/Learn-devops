- Django là 1 framework mạnh mẽ phát triển dễ dàng, nhanh chóng các ứng dụng Web phức tạp. Django hoạt động theo mô hình MVT (Model View Template)

    Client -> URL <-> View -> Model
                        -> Template
    Trong đó:
    - Model: được sử dụng mới mô hình ORM(code first)
    - View: Trong django thì view giống với controller trong mô hình MVC. Nó được sử dụng để xử lý request và response data
    - Tempalte: Giao diện (FrontEnd)

- Là mô hình ORM (code first) : Sử dụng code để tổ chức cơ sở dữ liệu

- Cài đặt môi trường:
#pip install django

- Tạo project:
#django-admin startproject <project-name>

- Tạo app:
#django-admin startapp <app-name>


#note
- Sau khi tạo project thì có 1 số file chính được tạo tự động trong project:
    + file manage.py : Cấu hình mặc định để khởi tạo server
    + bên trong sub folder của project:
        + setting: Bao gồm các thông tin cấu hình của django project (secret, debug, installed_apps, middleware)
        + url: Sử dụng để khai báo các URLs cho django project
        + asgi: Dùng cho các web server tương thích ASGI (Asynchronous Server Gateway)
        + wsgi: Dùng cho các web server tương thích WSGI (web server gateway interface)

#file settings:
- SECRET_KEY : giống với secret trong flask
- debug = true (default): Khi triển khai product phải chuyển về false tránh lộ thông tin
- INSTALLED_APPS: 
    + Những app đã được cài đặt sẵn (vd: admin, auth, sessions, messages, staticfiles)
    + Và khi muốn cài đặt thêm app mới mà muốn django miration được app này thì phải khai báo trong biến này
- middleware: Giữa các tầng nên sử dụng middleware để chặn lại các gói tin và kiểm tra
- database: 
    + mặc định khi khởi tạo project sẽ sử dụng sqllite
    + Django có thể sử dụng đồng thời nhiều database 
- ALLOW_HOST: Danh sách các chuỗi là tên host hoặc domain được phép sử dụng dịch vụ của django site. Thuộc tính này thường rỗng khi DEBUG=True.
- APPEND_SLASH: nếu là True thì các URL không kết thúc bằng slash(/). HTTP được redirect tới cùng URL như kèm slash ở cuối
- AUTH_USER_MODEL: chỉ định lớp model đại diện cho một User, mặc định là "auth.User"

#Viết courses/views.py

from django.shortcuts import render
from django.http import HttpResponse

def index(request):
    return render(request, template_name='index.html', context={ 'name':'Kien do'})


#Tạo courses/urls.py của app

from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name="index"),
]

=> Sau khi tạo url của app thì cần phải add thêm vào url của project để client có thể access từ ngoài vào

#Thêm url của app vào url của project (Chỉnh sửa coursesapp/urls.py)

from django.contrib import admin
from django.urls import path, include   //import include

urlpatterns = [
    path('', include('courses.urls')),  //Add path trỏ tới url của app
    path('admin/', admin.site.urls),
]

Trong đó: include dùng để tham chiếu URL con khác



#Kết nối database
- Biến DATABASE trong settings.py dùng cấu hình kết nối CSDL, mặc định trong database được cấu hình sử  dụng SQLite có sẵn:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

- Chú ý: Nếu sử dụng engine không phải SQLite thì phải đảm bảo CSDL chỉ định đã có sẵn

Trong đó:
- ENGINE: Chỉ định engine hệ quản trị csdl sẽ sử dụng:
    + django.db.backends.sqlite3
    + django.db.backends.mysql
    + django.db.backends.postgresql
- Name: tên cơ sở dữ liệu
- USER: username của cơ sở dữ liệu
- PASSWORD: pasword của csdl
- HOST: host chứa CSDL

VD: kết nối tới mysql
DATABASE = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'coursedb',
        'USER': 'root',
        'PASSWORD': '12345678',
        'HOST': '' #mặc định là localhost
    }
}


#Cài đặt mysql driver
pip install mysqlclient


#Model
- Một model là nơi duy nhất thực sự tương tác với dữ liệu. Mỗi model là một class kế thừa
    + django.db.models.Model
- Model chưa các trường (field) và hành vi (behavior) dữ liệu được lưu trữ
- Mỗi trường trong model đại diện cho một trường của bảng trong CSDL
- Ta cần cho django biết về sự tồn tại của courses app thông qua biến INSTALLED_APPS trong tập tin cấu hình setting.py

- Lệnh makemigrations cho django biết có sự thay đổi trong models.py và ta muốn lưu các thay đổi trong makemigrations
$python manage.py makemigrations courses

- Ta cũng có thể sử dụng sqlmigrate để xem SQL sẽ được tạo ra từ một migration để thực thi trong CSDL
$python manage.py sqlmigrate courses 0001

- Lệnh migrate thực thi migration để áp dụng những thay đổi trong models xuống lược đồ cơ sở dữ liệu
$python manage.py migrate

- Một migrattions được thực thi sẽ được lưu trong bảng django_migrations và nó sẽ không chạy lại lần nữa
- Lệnh migrate chỉ chạy cho các app định nghĩa bên trong biến INSTALLED_APPS



#Note mot so command mysql
service mysql start
show databases;
show tables;
select user from mysql.user;

#Create database
CREATE DATABASE `coursedb` \
DEFAULT CHARACTER SET utf8 \
DEFAULT COLLATE utf8_general_ci;

use coursedb;

create user 'kiendt'@'localhost' identified with mysql_native_password BY 'kiendt_dev';
GRANT ALL PRIVILEGES ON coursedb.* TO 'kiendt'@'localhost';


##Một số field thông dụng

//Sử dụng shell
$python manage.py shell

//Một số câu lệnh tương tác với DB
#import hàm trong model
>>> from courses.models import *
#Gán c = tên hàm và thêm giá trị
>>> c = Category(name="Lap trinh java") 
#Save data vào DB
>>> c.save()

#Có thể sử dụng trực tiếp objects để tương tác với db như sau:
>>> Category.objects.create(name="Lap trinh Django") 
<Category: Category object (2)>

#Có 1 số hàm như get_or_create thì nó sẽ create và get để kiểm tra xem giá trị đó đã tồn tại trong DB chưa.
#Nếu có nó sẽ trả tra True và add vào DB. Còn ngược lại sẽ là false và không add vào db
>>> Category.objects.get_or_create(name="Thiet ke web") 
(<Category: Category object (3)>, True)
>>> Category.objects.get_or_create(name="Thiet ke web")
(<Category: Category object (3)>, False)

#Create a course
>>> c = Category.objects.get(pk=1)
>>> c
<Category: Category object (1)>
>>> c.__dict__
{'_state': <django.db.models.base.ModelState object at 0x0000015CF7681310>, 'id': 1, 'name': 'Lap trinh java'}
>>> Course.objects.create(subject="Core Java", description="Nhap mon java", category=c)
<Course: Course object (1)>

#filter
>>> Category.objects.filter(name__contains="java")  //Lưu ý là các phương thức contains hay startswith có phân biệt hoa thường. Nếu không muốn phân biệt hoa thường thì sử dụng icontains
<QuerySet [<Category: Category object (1)>]>
>>> Category.objects.filter(name__startswith="java") 
<QuerySet []>
>>> Category.objects.filter(name__endswith="java")   
<QuerySet [<Category: Category object (1)>]>


###Meta options của model
- abstract: Thiết lập lớp model là trừu tượng
- app_label: tên app chứa model, nếu models được khai báo ngoài app thì thuộc tính này bắt buộc phải khai báo
- db_table: tên bảng CSDL sẽ được tạo cho models, mặc định {app_name}_{model_name} với các ký tự thường (lowercase)
- unique_together: thiết lập ràng buộc giá trị duy nhất cho nhiều trường kết hợp
- ordering: Chỉ định các trường dùng sắp xếp khi truy vấn dữ liệu. Mặc định là sắp xếp tăng, nếu thêm dấu "-" trước tên trường là sắp xếp giảm
- constraints: Thiết lập một số ràng buộc trong CSDL

###Mối quan hệ ManyToOne
- Sử dụng lớp models.ForeignKey để thiết lập quan hệ ManyToOne. Lớp này yêu cầu 2 đối số:
    + Model được tham chiếu tới
    + Giá trị đối số on_delete
- Các trường ForeignKey sẽ tự động được tạo index(db_index=True)
- Khi thực hiện migrate để tạo CSDL thì django sẽ tự thêm đuôi _id sau tên trường ForeignKey. Ví dụ category, dưới CSDL sẽ là category_id

- Giá trị on_delete cho biết cách xử lý nếu đối tượng được tham chiếu bởi ForeignKey bị xóa:
    + SET_NULL: thiết lập null cho trường ForeignKey, khi đó thuộc trính null=True trong ForeignKey
    + SET_DEFAULT: Thiết lập giá trị mặc định, sử dụng thêm thuộc tính default trong ForeignKey
    + CASCADE: Các đối tượng có chứa khai báo ForeignKey sẽ bị xóa theo
    + PROTECT: Ngăn không cho đối tượng được tham chiếu bị xóa, bằng cách ném ngoại lệ ProtectedError
    + RESTRICT: ngăn không cho đối tượng được tham chiếu bị xóa, bằng cách ném ngoại lệ RestrictedError. Nó khác PROTECT, đối tượng được tham chiếu cũng có thể được xóa, nếu nó chứa ForeignKey(on_delete=CASCADE) tới một models khác
    + SET(), DO_NOTHING

VD: Tạo thêm 1 model Lesson. Trong đó một bài học (Lesson) phải thuộc một khóa học (Course), trong khóa học có thể có nhiều loại bài học. Giả sử quy định:
    + Trong cùng một khóa học thì tựa đề các bài học là duy nhất
    + Khi các khóa học bị xóa thì các bài học của nó cũng sẽ bị xóa theo

class Lesson(ModelBase):
    class Meta:
        unique_together= ('subject', 'course')
    
    subject = models.CharField(max_length=255)
    content = models.TextField()
    course = models.ForeignKey(
        Course, on_delete=models.CASCADE,
        related_name='lessons',
        related_query_name='my_lession'
    )
    
    def __str__(self):
        return self.subject

    + related_name: Chỉ định tên được sử dụng bởi đối tượng tham chiếu khóa ngoại. Nếu ta không muốn django tạo quan hệ truy vấn ngược (backward) trong ForeignKey thì thiết lập giá trị thuộc tính này là "+" hoặc kết thúc là "+"
    + related_query_name: tên dùng để lọc dữ liệu từ đối tượng được tham chiếu khóa ngoại(mặc định là giá trị từ related_name)

    +Course không khai báo related_name trong ForeignKey tới Category
    + Từ category truy vấn danh sách course của nó:
        c = Category.objects.get(pk=1)
        c.course_set.all()  #course_set ngầm định được thêm
        <QuerySet [<Course: Các công nghệ lập trình hiện đại]>

    + Lesson có khai báo related_name trong ForeignKey tới course
    + Từ Course truy vấn danh sách lesson của nó:
        c = Course.objects.get(pk=1)
        c.lessons.all() #lessons khai báo bởi related_name
        <QuerySet [<Lesson: Giới thiệu>]>


-> Thực thi makemigrations courses
-> Thực thi migrate
-> Tạo 1 dòng dữ liệu mẫu cho lession:
c = Course.objects.get(pk=1)
Lesson.objects.create(subject="Giới thiệu", content="Giới thiệu các công nghệ lập trình hiện đại", course=c)
<Lesson: Giới thiệu>
-> Truy vấn trong quan hệ khóa ngoại
courses = Course.objects.filter(category__name__icontains="tin")
print(courses.query) -> Nó sẽ trả ra query dưới dạng ngôn ngữ database

    
###Mối quan hệ ManyToMany
- Sử dụng lớp ManyToManyField bắt buộc một đối số là model có liên quan trong quan hệ
- Các thuộc tính quan trọng:
    + related_name: Tương tự ForeignKey
    + related_query_name: Tương tự ForeignKey
    + throught: Chỉ định bảng model trung gian cho quan hệ ManyToMany
    + symmetrical: Sử dụng khi định nghĩa quan hệ ManyToMany đến chính nó
- Django sẽ tự động tạo bảng trung gian của quan hệ ManyToMany dưới dạng CSDL
- Tuy nhiên nếu ta muốn chỉ định bảng trung gian thì sử dụng through chỉ định model trung gian tại bảng trung gian

VD: 
- Thêm model Tag:
class Tag(models.Model):
    name = models.CharField(max_length=100, unique=True)

    def __str__(self):
        return self.name

- Tại model Lesson thiết lập mối quan hệ ManyToMany:
class Lesson(ModelBase):
    tags = models.ManyToManyField('Tag', blank=True, related_name='lessons')

==> Tóm lại thì thằng mối quan hệ này để truy vấn ngược xuôi giữa table này và table khác


- Tạo và thực thi migration để áp dụng vào DB
- Một bảng trung gian tự động được tạo courses_lesson_tags
- Thêm Tag vào Lesson
t = Tag.objects.create(name="Nhập môn")
l = Lesson.objects.get(pk=1)
l.tags.add(t)
l.save

- Xem danh sách Lesson của Tag và ngược lại
l.tags.all()
t.lessons.all()
