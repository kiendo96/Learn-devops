//Aurora
- Aurora là công nghệ database độc quyền của AWS, hỗ trợ 2 loại engine là MySQL và PostgreSQL
- Aurora có 2 hình thức triển khai:
  + Cluster (Master + Multi Read Replica)
  + Serverless
- Những tính năng vượt trội của Aurora so với RDS thông thường
  + Hiệu năng tốt hơn(so với RDS instance cùng cấu hình)
  + Hỗ trợ backtracking (1 tính năng cho phép revert database về trạng thái trong quá khứ tối đa 72h). Khác với restore từ snapshot đòi hỏi tạo instance mới, backtracking restore ngay trên chính cluster đang chạy
  + Tự động quản lý Write endpoint, Read enpoint ở cấp độ cluster

//Mô hình cluster của Aurora
- Cluster Aurora bao gồm:
  + 1 Master node (Primary instance)
  + 1 hoặc nhiều Replica node (tối đa 15)
- Data của Aurora cluster được lưu trên 1 storage layer gọi là Cluster volume span trên nhiều AZ để tăng HA
- Data được Cluster Volume tự động replicate trên nhiều AZ. (Số lượng replica không phụ thuộc vào số lượng instance của cluster)
- Cluster volume tự động tăng size dựa vào nhu cầu của người dung(Không thể fix cứng size)

//Aurrora Global Cluster
- Là một cơ chế cho phép tạo ra cụm cluster cross trên nhiều regions
  + Tăng tốc độ read tại mỗi region tương đương với local read
  + Mở rộng khả năng scale số lượng node read (Limit 15 read nodes cho 1 cluster)
  + Failover, Disaster recovery: rút ngắn RTO và giảm thiểu RPO khi xảy ra sự cố ở cấp độ region
- Mặc định cluster ở region thứ 2 trở đi chỉ có thể read, tuy nhiên có thể enable write forwarding để điều hướng request tới primary cluster
Note: Khác với RDS thông thường, Aurora sử dụng tâng Storage để replicate data giữa master-read nodes.

//Aurora serverless
- Aurora Serverless là 1 công nghệ cho phép tạo Database dưới dạng serverless
- Thay vì điều chỉnh cấu hình của DB instance, người dùng sẽ điều chỉnh ACU (Aurora Capacity Unit), ACU càng cao hiệu suất DB càng mạnh
- Phù hợp cho các hệ thống chưa biết rõ workload, hoặc workload có đặc trưng thay đổi lên xuống thường xuyên

//Parameter Groups
- RDS là một managed service do đó không thể login vào instance. Nếu muốn can thiệp vào setting ở cấp độ DB (Không phải setting OS) ta cần thông qua 1 cơ chế gián tiếp
- Khi tạo RDS nếu không chỉ định AWS sẽ sử dụng Parameter Group default của hệ database đang chọn. Default Parameter Group không thể chỉnh sửa
- Custom Parameter Group được tạo ra bằng cách copy default Parameter Group sau đó chỉnh sửa những tham số phù hợp với nhu cầu
- Parameter Groups có 2 loại là Cluster Parameter Groups và Instance Parameter Group. Hai loại này khác nhau về scope có thể apply

//Một số Parameter thường được custom riêng theo nhu cầu hệ thống
- max_connections: 
  + Ý nghĩa: Số lượng connection tối đa mà Database có thể tiếp nhận đồng thời. 
  + Default: Tùy theo size của instance
  + Allowed value: 50 - 12000

- long_query_time:
  + Ý nghĩa: Query chạy vượt quá số này sẽ được tính là Slow query
  + Default: 0
  + Allowed value: 0 - 31536000

- slow_query_log:
  + Ý nghĩa: Có log ra những câu query bị coi là slow query hay không
  + Default: 0
  + Allowed value: 0, 1

- max_allowed_packet:
  + Ý nghĩa: Package tối đa có thể gửi nhận tới database
  + Default: 1073741824
  + Allowed value: 1024 - 1073741824

- general_log:
  + Ý nghĩa: Có log ra general query hay không
  + Default: 0
  + Allowed value: 0, 1

- time_zone:
  + Ý nghĩa: Setting time zone cho database
  + Default: Same as region
  + Allowed value:  Ex: Asia/Tokyo

//Option Groups
- Tương tự Parameter Group tuy nhiên Option Group định nghĩa những setting liên quan tới Security là chủ yếu
- Một số ví dụ về option group:
  + SERVER_AUDIT_EVENTS: Loại action sẽ được log ra
      VD: CONNECT, QUERY, QUERY_DDL, QUERY_DML, QUER
  + SERVER_AUDIT_INCL_USERS: Include users vào audit log
  + SERVER_AUDIT_EXCL_USERS: Loại trừ users khỏi audit log
  + SERVER_AUDIT_LOGGING: Bật tắt audit logging


//RDS Proxy
- RDS cung cấp cơ chế proxy giúp quản lý connection tới các instance một cách hiệu quả, hạn chế bottle neck
  VD: do application quản lý connection không tốt gây ra
- Khi sử dụng proxy, application sẽ không kết nôi trực tiếp tới RDS mà không qua proxy endpoint
- Chi phí sẽ phát sinh thêm cho proxy
- Hiện tại hỗ trợ 3 engine: MySQL, PostgreSQL, SQL server

