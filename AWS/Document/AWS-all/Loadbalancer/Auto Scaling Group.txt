//Scaling:
- Là việc điều chỉnh cấu hình của các tài nguyên để đáp ứng với nhu cầu workload (số lượng request từ người dùng, số lượng công việc phải xử lý....)
- Có 2 hình thức scale:
    + Scale Up/Down: tăng/giảm cấu hình của resource (Tăng CPU/Ram cho Server, database, tăng dung lượng ổ cứng ....)
    + Scale Out/In: Tăng/Giảm số lượng thành phần trong 1 cụm chức năng (Add thêm server vào cụm application, add thêm node vào k8s cluster)

//Auto scaling group
- Có nhiệm vụ điều chỉnh số lượng của instance cho phù hợp với workload
- Mục đích:
    + Tiết kiệm chi phí
    + Tự động hóa việc mở rộng & phục hồi sự cố
- ASG sử dụng Launch Template để biết được cần phải launch EC2 như thế nào
- Để thực hiện được việc scale, Auto Scaling Group phải kết hợp với việc monitor các thông số của các thành phần trong hệ thống ddeer biết được khi nào cần scale-out, khi nào cần scale-in => Cần sử dụng CloudWatch

//Launch Configuration and Launch Template
- Mục đích: chỉ đẫn cho AutoScalingGroup biết được cần phải launch instance như thế nào
- Các thông tin có thể định nghĩa trong launch tempalte:
    + AMI
    + Instance type
    + Keypair(Trong trường hợp cần login vào instance sau khi tạo)
    + Subnet (Thường không chọn mà để AutoScalingGroup quyết định)
    + Security Group(s)
    + Volume(s)
    + Tag(s)
    + Userdata (script tự động chạy khi instance start)

//Các phương pháp scale hệ thống
- Có các option sau để scale một AutoScalingGroup:
    + No Scale: Duy trì 1 số lượng cố định instance (nếu instance chết thì tạo con mới để bổ sung ngoài ra không làm gì cả)
    + Manually Scalling: Điều chỉnh 3 thông số: min/max/desire để quyết định số lượng instance trong ASG
    + Dynamic Scaling: tự động scale dựa trên việc monitor các thông số
        <> Target tracking scaling: Monitor thông số ngay trên chính cluster. VD: CPU, Memory, Network in-out
        <> Step scaling: điều chỉnh số lượng instance (tăng/giảm) dựa trên 1 tập hợp các alarm (có thể đến từ các resource khác không phải bản thân cluster)
        <> Simple scaling: Tương tự Step scalling tuy nhiên có apply "cool down period"
    + Schedule Scaling: Đặt lịch để tự động tăng giảm số instance theo thời gian, phù hợp với các hệ thống có workload tăng vào 1 thời điểm cố định trong ngày
    + Predict Scaling: AWS đưa ra dự đoán dựa vào việc học từ thông số hàng ngày, hoằng tuần để điều chỉnh số lượng instance 1 cách tự động. Độ chính xác phụ thuộc vào thời gian application đã vận hành và tính ổn định của traffic đi vào hệ thống

//Dynamic Scaling Policies
- Target Tracking Scaling:
    + Most simple and easy to set-up 
    + Example: I want the average ASG CPU to stay at around 40%
- Simple/Step Scaling:
    + When a CloudWatch alarm is triggered (example CPU > 70%), then add 2 units
    + When a CloudWatch alarm is triggered (example CPU < 30%), remove 1 server
- Scheduled Actions:
    + Anticipate a scaling based on known usage patterns
    + Example: increase the min capacity to 10 at 5 PM on Fridays

//Predictive Scaling
- Predictive scaling: continuously forecast load and schedule scaling ahead

//Good metrics to scale on
- CPUUtilization: Average CPU utilization across your instances
- RequestCountPerTarget: to make sure the number of requests per EC2 instances is stable
- Average Network In / Out (if you're application is network bound)
- Any custom metric (that you push using CloudWatch)

//Scaling Cooldowns
- After a scaling activity happens, you are in the cooldown period (default 300 seconds)
- During the cooldown period, the ASG will not launch or terminate additional instances (to allow for metrics to stabilize)
- Advice: Use a ready-to-use AMI to reduce configuration time in order to be serving request fasters and reduce the cooldown period
