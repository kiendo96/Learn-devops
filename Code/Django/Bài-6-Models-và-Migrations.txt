a. Mở file /bookreviews/settings.py bằng pycharm và chỉnh sửa biến DATABASES như sau:
-=========
DATABASES = {
 'default': {
 'ENGINE': 'django.db.backends.postgresql',
 'NAME': 'bookreviews',\
 'USER': 'postgres',\
 'PASSWORD': 'abc@123',\
 'HOST': 'localhost',\
 'PORT': '5432',}
}
-=========
Note: trước đó, ta cài đặt postgreSQL và tạo database bookreviews
1. Theo default trong setting.py thì Django sử dụng SQLite. Ta có thể đổi thành PosgreSQL như sau:
a. Bước 1: cài đặt psycopg2 theo lệnh sau:
-=========
(env) PS D:\PYTHON_WEB\bookreviews> pip install psycopg2
-=========
b. Bước 2: tạo ra cấu trúc bảng default cho Django:
-==========
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py migrate
-==========
c. Bước 3: mở editor Dbeaver ta thấy kết quả như sau:
2. Hiểu về Migration: Quá trình biến đổi từ cấu trúc code python vào cấu trúc của database
 Model trong Django về bản chất là Python Class mà chứa khung/blueprint để tạo ra các table bên trong Database
Trong file models.py có thể chứa nhiều models và mỗi model sẽ thực thi việc biến đổi vào cấu trúc table trong
database (bao gồm các fields cùng mối quan hệ giữa các tables)

□ Book: lưu trữ thông tin về books
□ Contributor: lưu trữ thông tin về tác giả, đồng tác giả, hoặc nhà biên tập
□ Publisher: lưu trữ nhà xuất bản sách
□ Review: lưu trữ các bài đánh giá về các cuốn sách do người dùng ứng dụng thực thi
 Trong thí dụ về Reviews Application ta tạo ra 4 models:
a. Tổng quan:
 Mỗi một book sẽ có một publisher nên ta tạo model Publisher với code như sau (trong reviews/models.py):
b. Các bước thực thi model Publisher:
3. Các bước tạo Django Model và Migration
Bài 6. Models và Migrations
3:35 CH
 Python-Web Page 1
 Mỗi một book sẽ có một publisher nên ta tạo model Publisher với code như sau (trong reviews/models.py):
-=============
from django.db import models
class Publisher(models.Model):
 """A company that publishes books."""
 name = models.CharField(max_length=50,help_text="The name of the Publisher.")
 website = models.URLField(help_text="The Publisher's website.")
 email = models.EmailField(help_text="The Publisher's email address.")
 def __str__(self):
 return self.name
-=============
 Thực hiện cư trú (migrate) Publisher model tới database bằng lệnh sau:
-=========
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py makemigrations reviews
-=========
 Sau khi thực hiện lệnh trên sẽ xuất hiện new file theo cấu trúc:
Với nội dung:
-==================
# Generated by Django 3.2.3 on 2021-05-20 10:27
from django.db import migrations, models
class Migration(migrations.Migration):
 initial = True
 dependencies = [
 ]
 operations = [
 migrations.CreateModel(
 name='Publisher',
 fields=[
 ('id', models.BigAutoField(auto_created=True, primary_key=True,
serialize=False, verbose_name='ID')),
 Python-Web Page 2
serialize=False, verbose_name='ID')),
 ('name', models.CharField(help_text='The name of the Publisher.',
max_length=50)),
 ('website', models.URLField(help_text="The Publisher's website.")),
 ('email', models.EmailField(help_text="The Publisher's email address.",
max_length=254)),
 ],
 ),
 ]
-==================
 Hiển thị trạng thái của model migrations:
-=========
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py showmigrations
-=========
 Thực thi việc biến đổi model vào trong database thật, bằng lệnh sau:
-=============
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py sqlmigrate reviews 0001_initial
-=============
 Thực thi tiếp lệnh sau để hiển thị tables trong database thực:
-===========
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py migrate reviews
-===========
c. Tương tự thực thi model cho: Book, Contributor, Tại reviews/models.py ta thêm như sau:
-=============
class Book(models.Model):
 """A published book."""
 title = models.CharField(max_length=70, help_text="The title of the book.")
 publication_date = models.DateTimeField(verbose_name="Date the book was published.")
def __str__(self):
 isbn = models.CharField(max_length=20, verbose_name="ISBN number of the book.")
 Python-Web Page 3
def __str__(self):
 return self.title
--Contributor model
class Contributor(models.Model):
 """
 A contributor to a Book, e.g. author, editor, \
 co-author.
 """
 first_names = models.CharField(max_length=50,help_text= "The contributor's first name or
names.")
 last_names = models.CharField(max_length=50,help_text= "The contributor's last name or
names.")
 email = models.EmailField(help_text="The contact email for the contributor.")
 def __str__(self):
 return self.first_names
-=============
a. Mối quan hệ Many -To-One:
Tức là nhiều dòng dữ liệu ở 1 table tham chiếu tới 1 dòng dữ liệu ở table khác. Thí dụ: Nhiều sách được xuất bản bởi 1 nhà
xuất bản. Mối quan hệ giữa Book và Publisher là many-to-one.
-
- Để thực thi mối quan hệ nhiều - một ta thiết lập khóa ngoại (foreign key)
- Trong Book model sẽ thiết lập khóa ngoại để tham chiếu tới khóa chính của Publiser:
-===============
class Book(models.Model):
 """A published book."""
 title = models.CharField(max_length=70, help_text="The title of the book.")
 publication_date = models.DateTimeField(verbose_name="Date the book was
published.")
 isbn = models.CharField(max_length=20, verbose_name="ISBN number of the book.")
 publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
-===============
b. Mối quan hệ Many-to-Many:
Nhiều dòng trong 1 tables có tham chiếu tới nhiều dòng ở bảng khác. Thí dụ: một book có thể có nhiều tác giả, mỗi tác giả
lại có nhiều book. Mối quan hệ giữa Book và Contributor là n-n
-
- Thực hiện modify trong model Book như sau:
-=================
class Book(models.Model):
 """A published book."""
 title = models.CharField(max_length=70, help_text="The title of the book.")
 publication_date = models.DateTimeField(verbose_name="Date the book was published.")
 isbn = models.CharField(max_length=20, verbose_name="ISBN number of the book.")
 #moi quan he giua publisher va book la 1-n
 publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
 #moi quan he n:n gia book va contributor
 #De khoi tao quan n:n ta khoi tao thong qua mot table trung gian la: BookContributor
 contributors = models.ManyToManyField('Contributor', through="BookContributor")
-=================
 Models.ManyToManyField: thiết lập mối quan hệ nhiều nhiều giữa book và contributor
Through: field quan trọng. Khi có mối quan hệ n:n giữa 2 tables ta thường sinh ra bảng trung gian để thể hiện
(BookConributor)

Chú ý:
Trong trường Book và Contributor ta sinh ra 1 model tên: BookContributor để lưu trữ kiểu (Author, Co-Author hoặc Editor)
của từng Contributor cho mỗi Book như sau:
-
-===============
class BookContributor(models.Model):
 class ContributionRole(models.TextChoices):
 AUTHOR = "AUTHOR", "Author"
4. Mối quan hệ (relationship) giữa các tables
 Python-Web Page 4
 AUTHOR = "AUTHOR", "Author"
 CO_AUTHOR = "CO_AUTHOR", "Co-Author"
 EDITOR = "EDITOR", "Editor"
 book = models.ForeignKey(Book, on_delete=models.CASCADE)
 contributor = models.ForeignKey(Contributor, on_delete=models.CASCADE)
 role = models.CharField(verbose_name="The role this contributor had in the book.",
 choices=ContributionRole.choices, max_length=20)
-===============
 Trong BookContributor ta thiết lập 2 khóa ngoại tới bảng Book và Contributor tương ứng.
 Field Role: đây là field trung gian, nó lưu thông tin bổ sung cho mối quan hệ giữa Book và Contributor
Class ContributionRole(models.TextChoices): lớp này để xác định một tập hợp các lựa chọn bằng cách tạo 1 lớp con của
models.TextChoices

Option Choices: tham chiếu tới tập các choices được định nghĩa trong model. Nó hữu ích khi tạo Form mà sử dụng
model

Note:
c. Mối quan hệ 1:1
- Với quan hệ 1:1 thì 1 dòng trong 1 bảng sẽ tham chiếu tới 1 dòng thuộc 1 bảng khác
- Bước 1: Bổ sung thêm lệnh sau vào reviews/models.py
-============
from django.contrib import auth
-============
- Bước 2: Bổ sung code cho Review model:
-=========================
class Review(models.Model):
 content = models.TextField(help_text="The Review text.")
 rating = models.IntegerField(help_text="The rating the reviewer has given.")
 date_created = models.DateTimeField(auto_now_add=True,
 help_text="The date and time the review was
created.")
 date_edited = models.DateTimeField(null=True,
 help_text="The date and time the review was last
edited.")
 creator = models.ForeignKey(auth.get_user_model(), on_delete=models.CASCADE)
 book = models.ForeignKey(Book, on_delete=models.CASCADE,
 help_text="The Book that this review is for.")
-=========================
 Content: lưu trữ nội dung đánh giá cho 1 book
 Rating: lưu trữ giá trị đánh giá dạng số
 Date_created: thể hiện ngày đánh giá
 Creator: người đánh giá, lưu ý: lấy auth.get_user_model() ở đây tham chiếu tới user model được built-in trong Django
 Book: lưu trữ thông sách được đánh giá, 1 book có thể được đánh giá nhiều lần
Note:
5. Thực thi model Review
6. Apply toàn bộ model của Reviews App vào trong database
 Bước 1: chạy lệnh sau để tạo migration script:
-===============
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py makemigrations reviews
 Python-Web Page 5
-===============
Note: migration script được lưu trữ trong folder migrations
 Bước 2: migrate all model tới database bằng lệnh sau:
-===============
(env) PS D:\PYTHON_WEB\bookreviews> python manage.py migrate reviews
-===============
 Bước 3: Sau khi thực hiện lệnh ở bước 2, mở Dbeaver ta thấy xuất hiện tất cả các tables:

7. Các thao tác CRUD với database từ Python
 Django ORM không sử dụng các lệnh SQL thông thường để thao tác với CSDL. Mà nó cung cấp các phương thức để thao tác
 Ta sẽ thực hiện lần bằng lệnh của Python code để thao tác với Database
 Trước tiên mở python Shell như hình: bằng lệnh >python manage.py shell
 Python-Web Page 6
- Bước 1: import Publisher model
--==============
>>>from reviews.models import Publisher
--==============
- Bước 2: tạo một instance publisher:
-==========
>>>publisher = Publisher(name='SOLID Publishing', website='https://solid.edu.vn',
email='info@solid.edu.vn')
-==========
- Bước 3: gọi phương thức save() trong instance publisher để lưu trữ vào db:
-===========
>>> publisher.save()
-===========
- Bước 4: Xem kết quả đối tượng được lưu trong Database:
- Bước 5: Ta có thể sử dụng thuộc tính và thay đổi sau đó apply lại vào DB:
-===========
>>>publisher.email
'info@solid.edu.vn'
>>> publisher.email = 'customersupport@solid.edu.vn'
>>> publisher.save()
-===========
 Bài 1: Lưu trữ record (entry) vào table Publisher từng bước sau:
- Bước 1: import model Contributor
-==========
>>>from reviews.models import Contributor
-==========
- Bước 2: sử dụng phương thức create() để tạo đối tượng:
-=========
>>>contributor =Contributor.objects.create(first_names="Bui Huu", last_names="Dong",
email="dongbh@solid.edu.vn")
-=========
- Bước 3: xem kết quả tại Dbeaver
 Bài 2: sử dụng phương thức create() để tạo object cho bảng Contributor
 Bài 3: tạo đối tượng với một khóa ngoại (tạo 1 instance trong Book table) theo các bước sau:
 Python-Web Page 7
- Bước 1: Do mối quan hệ giữa Book và Publisher là n:1 ta import lệnh sau:
-===========
>>>from reviews.models import Book, Publisher
-===========
- Bước 2: Sử dụng lệnh get() để lấy object publisher cần:
-======
>>>publisher = Publisher.objects.get(name='SOLID Publishing')
-======
- Bước 3: ta cần cung cấp một date object cho publication_date -> import date:
-=======
>>>from datetime import date
-=======
- Bước 4: sử dụng method create() và truyền giá trị các field cho book:
-========
>>>book = Book.objects.create(title="Hoc lap trinh web ecommerce voi Django",
publication_date=date(2021, 5, 31),isbn="9781788629416", publisher=publisher)
-========
- Bước 5: Ta được kết quả khi truy vấn:
-=======
-=======
 Bài 3: tạo đối tượng với một khóa ngoại (tạo 1 instance trong Book table) theo các bước sau:
- Bước 1: ta import và thực thi lệnh sau:
-=============
>>>from reviews.models import Book
>>>from reviews.models import Contributor
>>>contributor = Contributor.objects.get(first_names='Bui Huu')
>>>book = Book.objects.get(title="Hoc lap trinh web ecommerce voi Django")
-=============
- Bước 2: Ta tạo đối tượng cho BookContributor
-============
>>>from reviews.models import BookContributor
>>>book_contributor = BookContributor(book=book,contributor=contributor, role='AUTHOR')
>>> book_contributor.save()
-============
 Bài 4: tạo bản ghi với mối quan hệ n:n: cụ thể giữa Book với Contributor. Ta theo các bước sau:
- Bước 1: nếu khởi tạo lại màn hình python shell ta import như sau:
-===========
>>>from reviews.models import Book, Contributor
>>>book = Book.objects.get(title="Hoc lap trinh web ecommerce voi Django")
-===========
- Bước 2: Sử dụng create() method để tao ra 1 contributor:
-==========
>>>contributor = Contributor.objects.create(first_names='Truc',last_names='New
Editor',email='truc@solid.edu.vn')
-==========
- Bước 3: sử dụng phương thức add() để tạo 1 contributor trong đối tượng book theo code sau:
-==========
>>>book.contributors.add(contributor,through_defaults={'role': 'EDITOR'})
-==========
 Bài 5: Sử dụng phương thức add() để khởi tạo mối quan hệ n:n theo các bước sau:
 Bài 6: Sử dụng phương thức create() và set() cho mối quan hệ n:n
Giả sử book "Hoc lap trinh web ecommerce voi Django" có hai editor. Ta sử dụng các bước sau để add thêm editor
 Python-Web Page 8
- Bước 1: sử dụng phương thức create():
-===========
>>>book.contributors.create(first_names='Luc', last_names= 'Editor second',
email='luc@gmail.com',through_defaults={'role': 'EDITOR'})
-===========
- Bước 2: ta có thể sử dụng set() method để add một list contributor cho book trên theo code như sau:
-=============
>>>from datetime import date
>>>from reviews.models import Publisher
>>>publisher = Publisher.objects.create(name='Nguyen Van Cu Publishing',
website='https://ecommerce.com', email='info@ecommerce.com')
>>> contributor1 = Contributor.objects.create(first_names='An', last_names='Nguyen Van',
email='an@gmail.com')
>>> contributor2 = Contributor.objects.create(first_names='Tri', last_names='Nguyen',
email='tri@gmail.com')
>>> book = Book.objects.create(title='Lap trinh Java co ban', publication_date=date(2021,
9, 25), isbn='9781451697216', publisher=publisher)
-=============
- Bước 3: Vì đây là mối quan hệ n:n ta có thể add một list objects sử dụng set() method, cụ thể:
-=========
>>> book.contributors.set([contributor1, contributor2], through_defaults={'role':
'CO_AUTHOR'})
-=========
- Bước 4: mở Dbeaver để view lại dữ liệu cho các bảng này
Giả sử book "Hoc lap trinh web ecommerce voi Django" có hai editor. Ta sử dụng các bước sau để add thêm editor
khác
a. Bài 1: sử dụng get() method để nhận object:
- Bước 1: lấy ra 1 object publiher với tên như sau:
-=============
>>>from reviews.models import Publisher
>>>publisher = Publisher.objects.get(name='Nguyen Van Cu Publishing')
-=============
- Bước 2: Sau khi lấy được publisher ta có thể truy cập vào các thuộc tính như bình thường. Thí dụ: publisher.email…
- Bước 3: có cách khác để retrieve một object thông qua primary key:
-=======
>>>Publisher.objects.get(id=2) #hoặc
>>>Publisher.objects.get(pk=2)
-=======
b. Bài 2: Sử dụng all() method để nhận 1 tập các đối tượng
Sử dụng all() method để nhận về một sets các object Contributors
- Bước 1: add đoạn code sau để nhận:
-========
>>>from reviews.models import Contributor
>>>Contributor.objects.all() # hoặc
>>> contributors = Contributor.objects.all()
-========
- Bước 2: Ta có thể truy cập thông qua chi số và các thuộc tính của chúng:
-==========
>>> contributors[0] #thuộc tính
>>> contributors[0].first_names
-==========
c. Bài 3: sử dụng filter các objects
- Bước 1: ta tạo 2 tập contributors và lưu trữ vào DB:
--==============
>>>from reviews.models import Contributor
>>> Contributor.objects.create(first_names='Nhat', last_names='Quang',
email='nhat@solid.edu.vn')
>>> Contributor.objects.create(first_names='luan', last_names='Nguyen Van',
8. Thao tác read database
 Python-Web Page 9
>>> Contributor.objects.create(first_names='luan', last_names='Nguyen Van',
email='nhan@solid.edu.vn')
-===============
- Bước 2: Nhận về các object có first_names='Tri' nếu ko tìm thấy nó sẽ trả về một Queryset rỗng
-======
>>> Contributor.objects.filter(first_names='Tri')
-======
d. Bài 4. Các điều kiện filter nâng cao:
Giả sử cần lấy ra các Book có publication_date > '01-01-2021' ta thực hiện:
-==============
>>>from reviews.models import Book
>>>book = Book.objects.filter(publication_date__gt=date(2021, 1, 1))
-==============
- lt: less than
- lte: less or equal
- gte: greater or equal
Note: ngoài ra, ta có thể sử dụng:
e. Bài 5: Sử dụng pattern matching cho filter và sắp xếp các đối tượng
- Sử dụng contains:
-==========
>>> book = Book.objects.filter(title__contains='Java')
-==========
- Sử dụng include() để trả tập ngược lại: Thí dụ: cần lấy ra những contributor tên không phải là 'Tri'
-=============
>>> Contributor.objects.exclude(first_names='Tri')
-=============
- Sử dụng order_by() method để sắp xếp tập dữ liệu theo tiêu chí nào đó: Thí dụ lấy all book và sắp theo date
-===============
>>> books = Book.objects.order_by("publication_date") #để desc ta đặt dấu -
>>> books = Book.objects.order_by("-publication_date")
-===============
f. Bài 6. Sử dụng values() -> trả ra một tập các dictinary
-============
>>> publishers = Publisher.objects.all().values()
-============
a. Bài 1: truy vấn thông qua khóa ngoại: lấy ra tất cả book cho publisher với tên:"SOLID Publishing" xuất bản:
-=============
>>> Book.objects.filter(publisher__name='SOLID Publishing')
-=============
b. Bài 2: truy vấn thông qua model name: với model name viết thường
-========
>>> Publisher.objects.get(book__title='Lap trinh Java co ban')
-========
c. Bài 3: Truy vấn qua khóa ngoại thông qua object instance.
Giả sử ta cần lấy về tên của publisher cho sách có tiêu đề: "Hoc lap trinh web ecommerce voi Django"
-===========
>>> book = Book.objects.get(title='Hoc lap trinh web ecommerce voi Django')
>>> book.publisher
-===========
d. Bài 4: ta có thể lấy về toàn bộ book được published by a publisher
-=========
>>> publisher = Publisher.objects.get(name='Nguyen Van Cu Publishing')
>>> publisher.book_set.all()
-=========
e. Bài 5: Ta sử dụng chuỗi các query:
-========
>>> Book.objects.filter(publisher__name='SOLID Publishing').filter(title='Lap trinh Java
co ban')
9. Truy vấn thông qua relationship
 Python-Web Page 10
co ban')
-========
a. Bài 1: thực hành many-to-many object:
Yêu cầu: sử dụng Book object lấy ra tất cả các Contributors và viết ra sách 'Lap trinh Java co ban'
-========
>>>from reviews.models import Book
>>>book = Book.objects.get(title='Lap trinh Java co ban')
>>>book.contributors.all()
-========
b. Bài 2: many-to-may sử dụng set() method
Yêu câu: sử dụng contributors object lấy ra tất cả các book được viết bởi contributor với tên "Tri"
-=======
>>>from reviews.models import Contributor
>>>contributor = Contributor.objects.get(first_names='Tri')
>>>contributor.book_set.all()
-=======
c. Bài 3. Sử dụng update() method:
Yêu cầu: sử dụng method update() để thay đổi giá trị 1 record
-==========
>>>from reviews.models import Contributor
>>>Contributor.objects.filter(last_names='Dong').update(first_names='Bui')
-==========
d. Bài 4. Sử dụng phương thức delete
Yêu cầu: xóa một contributor với last_names='New editor'
-=========
>>> from reviews.models import Contributor
>>> Contributor.objects.get(last_names='New editor').delete()
-=========
10. Bài tập
11. Đưa một tập dữ liệu cho ứng dụng BookReviews bằng các bước sau:
○ Bước 1: Tạo thư mục theo đường dẫn sau:
-========
bookreviews/reviews/management/commands/
-========
○ Bước 2: copy file data_reviews_app.csv và loadscv.py vào thưc mục commands trên
• Bước 3: xóa tất cả các bảng ở database đi (tốt nhất là drop database và tạo lại)
• Bước 4: Thực hiện lệnh sau:
-==========
python manage.py migrate
python manage.py loadcsv --csv reviews/management/commands/data_reviews_app.csv
-==========
 Note: tham khảo theo link sau: https://docs.djangoproject.com/en/3.0/howto/custom-management-commands/
 Python-Web Page 11 